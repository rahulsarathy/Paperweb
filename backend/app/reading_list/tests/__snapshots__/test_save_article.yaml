interactions:
- request:
    body: url=http%3A%2F%2Fpaulgraham.com%2Fds.html
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '41'
      Content-Type:
      - application/x-www-form-urlencoded
      User-Agent:
      - python-requests/2.22.0
    method: POST
    uri: http://pulp_parser_1:3000/api/mercury
  response:
    body:
      string: '{"title":"Do Things that Don''t Scale","author":null,"date_published":null,"dek":null,"lead_image_url":null,"content":"<p>\nJuly
        2013<p>One of the most common types of advice we give at Y Combinator is\nto
        do things that don&apos;t scale. A lot of would-be founders believe\nthat
        startups either take off or don&apos;t. You build something, make\nit available,
        and if you&apos;ve made a better mousetrap, people beat a\npath to your door
        as promised. Or they don&apos;t, in which case the\nmarket must not exist.\n<font>[<a
        href=\"#f1n\"><font>1</font></a>]</font></p>Actually startups take off because
        the founders make them take off.\nThere may be a handful that just grew by
        themselves, but usually\nit takes some sort of push to get them going. A good
        metaphor would\nbe the cranks that car engines had before they got electric
        starters.\nOnce the engine was going, it would keep going, but there was a\nseparate
        and laborious process to get it going.<p><b>Recruit</b></p>The most common
        unscalable thing founders have to do at the start\nis to recruit users manually.
        Nearly all startups have to. You\ncan&apos;t wait for users to come to you.
        You have to go out and get\nthem.Stripe is one of the most successful startups
        we&apos;ve funded, and the\nproblem they solved was an urgent one. If anyone
        could have sat\nback and waited for users, it was Stripe. But in fact they&apos;re\nfamous
        within YC for aggressive early user acquisition.Startups building things for
        other startups have a big pool of\npotential users in the other companies
        we&apos;ve funded, and none took\nbetter advantage of it than Stripe. At YC
        we use the term &quot;Collison\ninstallation&quot; for the technique they
        invented. More diffident\nfounders ask &quot;Will you try our beta?&quot;
        and if the answer is yes,\nthey say &quot;Great, we&apos;ll send you a link.&quot;
        But the Collison brothers\nweren&apos;t going to wait. When anyone agreed
        to try Stripe they&apos;d say\n&quot;Right then, give me your laptop&quot;
        and set them up on the spot.<p>There are two reasons founders resist going
        out and recruiting users\nindividually. One is a combination of shyness and
        laziness. They&apos;d\nrather sit at home writing code than go out and talk
        to a bunch of\nstrangers and probably be rejected by most of them. But for
        a\nstartup to succeed, at least one founder (usually the CEO) will\nhave to
        spend a lot of time on sales and marketing.\n<font>[<a href=\"#f2n\"><font>2</font></a>]</font></p><p>The
        other reason founders ignore this path is that the absolute\nnumbers seem
        so small at first. This can&apos;t be how the big, famous\nstartups got started,
        they think. The mistake they make is to\nunderestimate the power of compound
        growth. We encourage every\nstartup to measure their progress by weekly <a
        href=\"growth.html\">growth\nrate</a>. If you have 100 users, you need to
        get 10 more next week\nto grow 10% a week. And while 110 may not seem much
        better than\n100, if you keep growing at 10% a week you&apos;ll be surprised
        how big\nthe numbers get. After a year you&apos;ll have 14,000 users, and
        after\n2 years you&apos;ll have 2 million.</p><p>You&apos;ll be doing different
        things when you&apos;re acquiring users a\nthousand at a time, and growth
        has to slow down eventually. But\nif the market exists you can usually start
        by recruiting users\nmanually and then gradually switch to less manual methods.
        <font>[<a href=\"#f3n\"><font>3</font></a>]</font></p>Airbnb is a classic
        example of this technique. Marketplaces are\nso hard to get rolling that you
        should expect to take heroic measures\nat first. In Airbnb&apos;s case, these
        consisted of going door to door\nin New York, recruiting new users and helping
        existing ones improve\ntheir listings. When I remember the Airbnbs during
        YC, I picture\nthem with rolly bags, because when they showed up for tuesday
        dinners\nthey&apos;d always just flown back from somewhere.<p><b>Fragile</b></p>Airbnb
        now seems like an unstoppable juggernaut, but early on it\nwas so fragile
        that about 30 days of going out and engaging in\nperson with users made the
        difference between success and failure.That initial fragility was not a unique
        feature of Airbnb. Almost\nall startups are fragile initially. And that&apos;s
        one of the biggest\nthings inexperienced founders and investors (and reporters
        and\nknow-it-alls on forums) get wrong about them. They unconsciously\njudge
        larval startups by the standards of established ones. They&apos;re\nlike someone
        looking at a newborn baby and concluding &quot;there&apos;s no\nway this tiny
        creature could ever accomplish anything.&quot;<p>It&apos;s harmless if reporters
        and know-it-alls dismiss your startup.\nThey always get things wrong. It&apos;s
        even ok if investors dismiss\nyour startup; they&apos;ll change their minds
        when they see growth. The\nbig danger is that you&apos;ll dismiss your startup
        yourself. I&apos;ve seen\nit happen. I often have to encourage founders who
        don&apos;t see the\nfull potential of what they&apos;re building. Even Bill
        Gates made that\nmistake. He returned to Harvard for the fall semester after
        starting\nMicrosoft. He didn&apos;t stay long, but he wouldn&apos;t have returned
        at\nall if he&apos;d realized Microsoft was going to be even a fraction of\nthe
        size it turned out to be. <font>[<a href=\"#f4n\"><font>4</font></a>]</font></p>The
        question to ask about an early stage startup is not &quot;is this\ncompany
        taking over the world?&quot; but &quot;how big could this company\nget if
        the founders did the right things?&quot; And the right things\noften seem
        both laborious and inconsequential at the time. Microsoft\ncan&apos;t have
        seemed very impressive when it was just a couple guys\nin Albuquerque writing
        Basic interpreters for a market of a few\nthousand hobbyists (as they were
        then called), but in retrospect\nthat was the optimal path to dominating microcomputer
        software.\nAnd I know Brian Chesky and Joe Gebbia didn&apos;t feel like they
        were\nen route to the big time as they were taking &quot;professional&quot;
        photos\nof their first hosts&apos; apartments. They were just trying to survive.\nBut
        in retrospect that too was the optimal path to dominating a big\nmarket.<p>How
        do you find users to recruit manually? If you build something\nto solve <a
        href=\"startupideas.html\">your own problems</a>, then\nyou only have to find
        your peers, which is usually straightforward.\nOtherwise you&apos;ll have
        to make a more deliberate effort to locate\nthe most promising vein of users.
        The usual way to do that is to\nget some initial set of users by doing a comparatively
        untargeted\nlaunch, and then to observe which kind seem most enthusiastic,
        and\nseek out more like them. For example, Ben Silbermann noticed that\na
        lot of the earliest Pinterest users were interested in design,\nso he went
        to a conference of design bloggers to recruit users, and\nthat worked well.
        <font>[<a href=\"#f5n\"><font>5</font></a>]</font></p><p><b>Delight</b></p>You
        should take extraordinary measures not just to acquire users,\nbut also to
        make them happy. For as long as they could (which\nturned out to be surprisingly
        long), Wufoo sent each new user a\nhand-written thank you note. Your first
        users should feel that\nsigning up with you was one of the best choices they
        ever made.\nAnd you in turn should be racking your brains to think of new
        ways\nto delight them.Why do we have to teach startups this? Why is it counterintuitive\nfor
        founders? Three reasons, I think.One is that a lot of startup founders are
        trained as engineers,\nand customer service is not part of the training of
        engineers.\nYou&apos;re supposed to build things that are robust and elegant,
        not\nbe slavishly attentive to individual users like some kind of\nsalesperson.
        Ironically, part of the reason engineering is\ntraditionally averse to handholding
        is that its traditions date\nfrom a time when engineers were less powerful
        &#x2014; when they were\nonly in charge of their narrow domain of building
        things, rather\nthan running the whole show. You can be ornery when you&apos;re
        Scotty,\nbut not when you&apos;re Kirk.Another reason founders don&apos;t
        focus enough on individual customers\nis that they worry it won&apos;t scale.
        But when founders of larval\nstartups worry about this, I point out that in
        their current state\nthey have nothing to lose. Maybe if they go out of their
        way to\nmake existing users super happy, they&apos;ll one day have too many
        to\ndo so much for. That would be a great problem to have. See if you\ncan
        make it happen. And incidentally, when it does, you&apos;ll find\nthat delighting
        customers scales better than you expected. Partly\nbecause you can usually
        find ways to make anything scale more than\nyou would have predicted, and
        partly because delighting customers\nwill by then have permeated your culture.I
        have never once seen a startup lured down a blind alley by trying\ntoo hard
        to make their initial users happy.<p>But perhaps the biggest thing preventing
        founders from realizing\nhow attentive they could be to their users is that
        they&apos;ve never\nexperienced such attention themselves. Their standards
        for customer\nservice have been set by the companies they&apos;ve been customers
        of,\nwhich are mostly big ones. Tim Cook doesn&apos;t send you a hand-written\nnote
        after you buy a laptop. He can&apos;t. But you can. That&apos;s one\nadvantage
        of being small: you can provide a level of service no big\ncompany can. <font>[<a
        href=\"#f6n\"><font>6</font></a>]</font></p>Once you realize that existing
        conventions are not the upper bound\non user experience, it&apos;s interesting
        in a very pleasant way to think\nabout how far you could go to delight your
        users.<p><b>Experience</b></p>I was trying to think of a phrase to convey
        how extreme your attention\nto users should be, and I realized Steve Jobs
        had already done it:\ninsanely great. Steve wasn&apos;t just using &quot;insanely&quot;
        as a synonym\nfor &quot;very.&quot; He meant it more literally &#x2014; that
        one should focus\non quality of execution to a degree that in everyday life
        would be\nconsidered pathological.All the most successful startups we&apos;ve
        funded have, and that probably\ndoesn&apos;t surprise would-be founders. What
        novice founders don&apos;t get\nis what insanely great translates to in a
        larval startup. When\nSteve Jobs started using that phrase, Apple was already
        an established\ncompany. He meant the Mac (and its documentation and even\npackaging
        &#x2014; such is the nature of obsession) should be insanely\nwell designed
        and manufactured. That&apos;s not hard for engineers to\ngrasp. It&apos;s
        just a more extreme version of designing a robust and\nelegant product.What
        founders have a hard time grasping (and Steve himself might\nhave had a hard
        time grasping) is what insanely great morphs into\nas you roll the time slider
        back to the first couple months of a\nstartup&apos;s life. It&apos;s not the
        product that should be insanely great,\nbut the experience of being your user.
        The product is just one\ncomponent of that. For a big company it&apos;s necessarily
        the dominant\none. But you can and should give users an insanely great experience\nwith
        an early, incomplete, buggy product, if you make up the\ndifference with attentiveness.<p>Can,
        perhaps, but should? Yes. Over-engaging with early users is\nnot just a permissible
        technique for getting growth rolling. For\nmost successful startups it&apos;s
        a necessary part of the feedback loop\nthat makes the product good. Making
        a better mousetrap is not an\natomic operation. Even if you start the way
        most successful startups\nhave, by building something you yourself need, the
        first thing you\nbuild is never quite right. And except in domains with big
        penalties\nfor making mistakes, it&apos;s often better not to aim for perfection\ninitially.
        In software, especially, it usually works best to get\nsomething in front
        of users as soon as it has a quantum of utility,\nand then see what they do
        with it. Perfectionism is often an excuse\nfor procrastination, and in any
        case your initial model of users\nis always inaccurate, even if you&apos;re
        one of them. <font>[<a href=\"#f7n\"><font>7</font></a>]</font></p>The feedback
        you get from engaging directly with your earliest users\nwill be the best
        you ever get. When you&apos;re so big you have to\nresort to focus groups,
        you&apos;ll wish you could go over to your users&apos;\nhomes and offices
        and watch them use your stuff like you did when\nthere were only a handful
        of them.<p><b>Fire</b></p>Sometimes the right unscalable trick is to focus
        on a deliberately\nnarrow market. It&apos;s like keeping a fire contained
        at first to get\nit really hot before adding more logs.That&apos;s what Facebook
        did. At first it was just for Harvard students.\nIn that form it only had
        a potential market of a few thousand people,\nbut because they felt it was
        really for them, a critical mass of\nthem signed up. After Facebook stopped
        being for Harvard students,\nit remained for students at specific colleges
        for quite a while.\nWhen I interviewed Mark Zuckerberg at Startup School,
        he said that\nwhile it was a lot of work creating course lists for each school,\ndoing
        that made students feel the site was their natural home.<p>Any startup that
        could be described as a marketplace usually has\nto start in a subset of the
        market, but this can work for other\nstartups as well. It&apos;s always worth
        asking if there&apos;s a subset of\nthe market in which you can get a critical
        mass of users quickly.\n<font>[<a href=\"#f8n\"><font>8</font></a>]</font></p>Most
        startups that use the contained fire strategy do it unconsciously.\nThey build
        something for themselves and their friends, who happen\nto be the early adopters,
        and only realize later that they could\noffer it to a broader market. The
        strategy works just as well if\nyou do it unconsciously. The biggest danger
        of not being consciously\naware of this pattern is for those who naively discard
        part of it.\nE.g. if you don&apos;t build something for yourself and your
        friends,\nor even if you do, but you come from the corporate world and your\nfriends
        are not early adopters, you&apos;ll no longer have a perfect\ninitial market
        handed to you on a platter.Among companies, the best early adopters are usually
        other startups.\nThey&apos;re more open to new things both by nature and because,
        having\njust been started, they haven&apos;t made all their choices yet. Plus\nwhen
        they succeed they grow fast, and you with them. It was one\nof many unforeseen
        advantages of the YC model (and specifically of\nmaking YC big) that B2B startups
        now have an instant market of\nhundreds of other startups ready at hand.<p><b>Meraki</b></p><p>For
        <a href=\"hw.html\">hardware startups</a> there&apos;s a variant of\ndoing
        things that don&apos;t scale that we call &quot;pulling a Meraki.&quot;\nAlthough
        we didn&apos;t fund Meraki, the founders were Robert Morris&apos;s\ngrad students,
        so we know their history. They got started by doing\nsomething that really
        doesn&apos;t scale: assembling their routers\nthemselves.</p><p>Hardware startups
        face an obstacle that software startups don&apos;t.\nThe minimum order for
        a factory production run is usually several\nhundred thousand dollars. Which
        can put you in a catch-22: without\na product you can&apos;t generate the
        growth you need to raise the money\nto manufacture your product. Back when
        hardware startups had to\nrely on investors for money, you had to be pretty
        convincing to\novercome this. The arrival of crowdfunding (or more precisely,\npreorders)
        has helped a lot. But even so I&apos;d advise startups to\npull a Meraki initially
        if they can. That&apos;s what Pebble did. The\nPebbles <a href=\"https://sep.yimg.com/ty/cdn/paulgraham/eric.jpg?t=1578919884&amp;\">assembled</a>
        the first several hundred watches themselves. If\nthey hadn&apos;t gone through
        that phase, they probably wouldn&apos;t have\nsold $10 million worth of watches
        when they did go on Kickstarter.</p>Like paying excessive attention to early
        customers, fabricating\nthings yourself turns out to be valuable for hardware
        startups.\nYou can tweak the design faster when you&apos;re the factory, and
        you\nlearn things you&apos;d never have known otherwise. Eric Migicovsky of\nPebble
        said one of things he learned was &quot;how valuable it was to\nsource good
        screws.&quot; Who knew?<p><b>Consult</b></p><p>Sometimes we advise founders
        of B2B startups to take over-engagement\nto an extreme, and to pick a single
        user and act as if they were\nconsultants building something just for that
        one user. The initial\nuser serves as the form for your mold; keep tweaking
        till you fit\ntheir needs perfectly, and you&apos;ll usually find you&apos;ve
        made something\nother users want too. Even if there aren&apos;t many of them,
        there are\nprobably adjacent territories that have more. As long as you can\nfind
        just one user who really needs something and can act on that\nneed, you&apos;ve
        got a toehold in making something people want, and\nthat&apos;s as much as
        any startup needs initially. <font>[<a href=\"#f9n\"><font>9</font></a>]</font></p>Consulting
        is the canonical example of work that doesn&apos;t scale.\nBut (like other
        ways of bestowing one&apos;s favors liberally) it&apos;s safe\nto do it so
        long as you&apos;re not being paid to. That&apos;s where companies\ncross
        the line. So long as you&apos;re a product company that&apos;s merely\nbeing
        extra attentive to a customer, they&apos;re very grateful even if\nyou don&apos;t
        solve all their problems. But when they start paying you\nspecifically for
        that attentiveness &#x2014; when they start paying\nyou by the hour &#x2014;
        they expect you to do everything.Another consulting-like technique for recruiting
        initially lukewarm\nusers is to use your software yourselves on their behalf.
        We\ndid that at Viaweb. When we approached merchants asking if they\nwanted
        to use our software to make online stores, some said no, but\nthey&apos;d
        let us make one for them. Since we would do anything to get\nusers, we did.
        We felt pretty lame at the time. Instead of\norganizing big strategic e-commerce
        partnerships, we were trying\nto sell luggage and pens and men&apos;s shirts.
        But in retrospect it\nwas exactly the right thing to do, because it taught
        us how it would\nfeel to merchants to use our software. Sometimes the feedback
        loop\nwas near instantaneous: in the middle of building some merchant&apos;s\nsite
        I&apos;d find I needed a feature we didn&apos;t have, so I&apos;d spend a\ncouple
        hours implementing it and then resume building the site.<p><b>Manual</b></p>There&apos;s
        a more extreme variant where you don&apos;t just use your software,\nbut are
        your software. When you only have a small number of users,\nyou can sometimes
        get away with doing by hand things that you plan\nto automate later. This
        lets you launch faster, and when you do\nfinally automate yourself out of
        the loop, you&apos;ll know exactly what\nto build because you&apos;ll have
        muscle memory from doing it yourself.When manual components look to the user
        like software, this technique\nstarts to have aspects of a practical joke.
        For example, the way\nStripe delivered &quot;instant&quot; merchant accounts
        to its first users was\nthat the founders manually signed them up for traditional
        merchant\naccounts behind the scenes.Some startups could be entirely manual
        at first. If you can find\nsomeone with a problem that needs solving and you
        can solve it\nmanually, go ahead and do that for as long as you can, and then\ngradually
        automate the bottlenecks. It would be a little frightening\nto be solving
        users&apos; problems in a way that wasn&apos;t yet automatic,\nbut less frightening
        than the far more common case of having something\nautomatic that doesn&apos;t
        yet solve anyone&apos;s problems.<p><b>Big</b></p>I should mention one sort
        of initial tactic that usually doesn&apos;t\nwork: the Big Launch. I occasionally
        meet founders who seem to\nbelieve startups are projectiles rather than powered
        aircraft, and\nthat they&apos;ll make it big if and only if they&apos;re launched
        with\nsufficient initial velocity. They want to launch simultaneously\nin
        8 different publications, with embargoes. And on a tuesday, of\ncourse, since
        they read somewhere that&apos;s the optimum day to launch\nsomething.<p>It&apos;s
        easy to see how little launches matter. Think of some successful\nstartups.
        How many of their launches do you remember?\nAll you need from a launch is
        some initial core of users. How well\nyou&apos;re doing a few months later
        will depend more on how happy you\nmade those users than how many there were
        of them.\n<font>[<a href=\"#f10n\"><font>10</font></a>]</font></p>So why do
        founders think launches matter? A combination of solipsism\nand laziness.
        They think what they&apos;re building is so great that\neveryone who hears
        about it will immediately sign up. Plus it would\nbe so much less work if
        you could get users merely by broadcasting\nyour existence, rather than recruiting
        them one at a time. But\neven if what you&apos;re building really is great,
        getting users will\nalways be a gradual process &#x2014; partly because great
        things\nare usually also novel, but mainly because users have other things\nto
        think about.<p>Partnerships too usually don&apos;t work. They don&apos;t work
        for startups\nin general, but they especially don&apos;t work as a way to
        get growth\nstarted. It&apos;s a common mistake among inexperienced founders
        to\nbelieve that a partnership with a big company will be their big\nbreak.
        Six months later they&apos;re all saying the same thing: that\nwas way more
        work than we expected, and we ended up getting practically\nnothing out of
        it. <font>[<a href=\"#f11n\"><font>11</font></a>]</font></p><p>It&apos;s not
        enough just to do something extraordinary initially. You\nhave to make an
        extraordinary <i>effort</i> initially. Any strategy\nthat omits the effort
        &#x2014; whether it&apos;s expecting a big launch to\nget you users, or a
        big partner &#x2014; is ipso facto suspect.</p><p><b>Vector</b></p>The need
        to do something unscalably laborious to get started is so\nnearly universal
        that it might be a good idea to stop thinking of\nstartup ideas as scalars.
        Instead we should try thinking of them\nas pairs of what you&apos;re going
        to build, plus the unscalable thing(s)\nyou&apos;re going to do initially
        to get the company going.<p>It could be interesting to start viewing startup
        ideas this way,\nbecause now that there are two components you can try to
        be imaginative\nabout the second as well as the first. But in most cases the
        second\ncomponent will be what it usually is &#x2014; recruit users manually\nand
        give them an overwhelmingly good experience &#x2014; and the main\nbenefit
        of treating startups as vectors will be to remind founders\nthey need to work
        hard in two dimensions.\n<font>[<a href=\"#f12n\"><font>12</font></a>]</font></p>In
        the best case, both components of the vector contribute to your\ncompany&apos;s
        DNA: the unscalable things you have to do to get started\nare not merely a
        necessary evil, but change the company permanently\nfor the better. If you
        have to be aggressive about user acquisition\nwhen you&apos;re small, you&apos;ll
        probably still be aggressive when you&apos;re\nbig. If you have to manufacture
        your own hardware, or use your\nsoftware on users&apos;s behalf, you&apos;ll
        learn things you couldn&apos;t have\nlearned otherwise. And most importantly,
        if you have to work hard\nto delight users when you only have a handful of
        them, you&apos;ll keep\ndoing it when you have a lot.<p><b>Notes</b></p><p>[<a><font>1</font></a>]\nActually
        Emerson never mentioned mousetraps specifically. He\nwrote &quot;If a man
        has good corn or wood, or boards, or pigs, to sell,\nor can make better chairs
        or knives, crucibles or church organs,\nthan anybody else, you will find a
        broad hard-beaten road to his\nhouse, though it be in the woods.&quot;</p><p>[<a><font>2</font></a>]\nThanks
        to Sam Altman for suggesting I make this explicit.\nAnd no, you can&apos;t
        avoid doing sales by hiring someone to do it for\nyou. You have to do sales
        yourself initially. Later you can hire\na real salesperson to replace you.</p><p>[<a><font>3</font></a>]\nThe
        reason this works is that as you get bigger, your size\nhelps you grow. Patrick
        Collison wrote &quot;At some point, there was\na very noticeable change in
        how Stripe felt. It tipped from being\nthis boulder we had to push to being
        a train car that in fact had\nits own momentum.&quot;</p><p>[<a><font>4</font></a>]\nOne
        of the more subtle ways in which YC can help founders\nis by calibrating their
        ambitions, because we know exactly how a\nlot of successful startups looked
        when they were just getting\nstarted.</p><p>[<a><font>5</font></a>]\nIf you&apos;re
        building something for which you can&apos;t easily get\na small set of users
        to observe &#x2014; e.g. enterprise software &#x2014; and\nin a domain where
        you have no connections, you&apos;ll have to rely on\ncold calls and introductions.
        But should you even be working on\nsuch an idea?</p><p>[<a><font>6</font></a>]\nGarry
        Tan pointed out an interesting trap founders fall into\nin the beginning.
        They want so much to seem big that they imitate\neven the flaws of big companies,
        like indifference to individual\nusers. This seems to them more &quot;professional.&quot;
        Actually it&apos;s\nbetter to embrace the fact that you&apos;re small and
        use whatever\nadvantages that brings.</p><p>[<a><font>7</font></a>]\nYour
        user model almost couldn&apos;t be perfectly accurate, because\nusers&apos;
        needs often change in response to what you build for them.\nBuild them a microcomputer,
        and suddenly they need to run spreadsheets\non it, because the arrival of
        your new microcomputer causes someone\nto invent the spreadsheet.</p><p>[<a><font>8</font></a>]\nIf
        you have to choose between the subset that will sign up\nquickest and those
        that will pay the most, it&apos;s usually best to\npick the former, because
        those are probably the early adopters.\nThey&apos;ll have a better influence
        on your product, and they won&apos;t\nmake you expend as much effort on sales.
        And though they have less\nmoney, you don&apos;t need that much to maintain
        your target growth rate\nearly on.</p><p>[<a><font>9</font></a>]\nYes, I can
        imagine cases where you could end up making\nsomething that was really only
        useful for one user. But those are\nusually obvious, even to inexperienced
        founders. So if it&apos;s not\nobvious you&apos;d be making something for
        a market of one, don&apos;t worry\nabout that danger.</p><p>[<a><font>10</font></a>]\nThere
        may even be an inverse correlation between launch\nmagnitude and success.
        The only launches I remember are famous\nflops like the Segway and Google
        Wave. Wave is a particularly\nalarming example, because I think it was actually
        a great idea that\nwas killed partly by its overdone launch.</p><p>[<a><font>11</font></a>]\nGoogle
        grew big on the back of Yahoo, but that wasn&apos;t a\npartnership. Yahoo
        was their customer.</p><p>[<a><font>12</font></a>]\nIt will also remind founders
        that an idea where the second\ncomponent is empty &#x2014; an idea where there
        is nothing you can do\nto get going, e.g. because you have no way to find
        users to recruit\nmanually &#x2014; is probably a bad idea, at least for those
        founders.</p><p><b>Thanks</b> to Sam Altman, Paul Buchheit, Patrick Collison,
        Kevin\nHale, Steven Levy, Jessica Livingston, Geoff Ralston, and Garry Tan
        for reading\ndrafts of this.</p></p>","next_page_url":null,"url":"http://paulgraham.com/ds.html","domain":"paulgraham.com","excerpt":"July
        2013One of the most common types of advice we give at Y Combinator is to do
        things that don''t scale. A lot of would-be founders believe that startups
        either take off or don''t. You build&hellip;","word_count":1,"direction":"ltr","total_pages":1,"rendered_pages":1}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '27993'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Thu, 19 Mar 2020 17:45:20 GMT
      ETag:
      - W/"6d59-jw9OvXheDPDzNWN1emnoUBeLlNE"
      X-Powered-By:
      - Express
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Authorization:
      - !!binary |
        QVdTNC1ITUFDLVNIQTI1NiBDcmVkZW50aWFsPUFLSUEyR1ozWEYySjVBTUNVQ1RLLzIwMjAwMzE5
        L3VzLXdlc3QtMS9zMy9hd3M0X3JlcXVlc3QsIFNpZ25lZEhlYWRlcnM9aG9zdDt4LWFtei1jb250
        ZW50LXNoYTI1Njt4LWFtei1kYXRlLCBTaWduYXR1cmU9YjM2MjRmMzlmMmEzMWZhZDlkZDJjN2Qz
        OTI0ZjA3NjE0YWYwZmRjZGUzMzdjYzFhNWI5MWZmOTU5YjMwM2NkNw==
      User-Agent:
      - !!binary |
        Qm90bzMvMS4xMi4xNSBQeXRob24vMy43LjYgTGludXgvNC4xOS43Ni1saW51eGtpdCBCb3RvY29y
        ZS8xLjE1LjE1IFJlc291cmNl
      X-Amz-Content-SHA256:
      - !!binary |
        ZTNiMGM0NDI5OGZjMWMxNDlhZmJmNGM4OTk2ZmI5MjQyN2FlNDFlNDY0OWI5MzRjYTQ5NTk5MWI3
        ODUyYjg1NQ==
      X-Amz-Date:
      - !!binary |
        MjAyMDAzMTlUMTc0NTIwWg==
    method: HEAD
    uri: https://pulphtml-test.s3.us-west-1.amazonaws.com/2bd58bc02ba2b9dc0ad9.html
  response:
    body:
      string: ''
    headers:
      Accept-Ranges:
      - bytes
      Content-Length:
      - '26598'
      Content-Type:
      - binary/octet-stream
      Date:
      - Thu, 19 Mar 2020 17:45:21 GMT
      ETag:
      - '"2caea9fae8cf61af485a6addc3e4c540"'
      Last-Modified:
      - Thu, 05 Mar 2020 04:27:35 GMT
      Server:
      - AmazonS3
      x-amz-id-2:
      - iwNIaf4k863DqJewUARbQ3EkcsSC3woNQvI6NkzN4e6CvoMTqV7lggEJoJ4855zeJcAJRuRGqtU=
      x-amz-meta-url:
      - http://paulgraham.com/ds.html
      x-amz-request-id:
      - B322EBFA7055C5B5
    status:
      code: 200
      message: OK
version: 1
