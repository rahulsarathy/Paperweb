###
# Stage 1 - Throwaway image with C compiler/dependencies
FROM python:3.7.4-alpine as buildimage

# update and install dependencies
RUN apk --update \
    add --no-cache --virtual .build-deps \
    gcc \
    linux-headers \
    musl-dev \
    libc-dev \
    python3-dev \
    postgresql \
    postgresql-dev \
    libffi-dev \
    openssl-dev \
    fortify-headers \
    libxml2-dev \
    jpeg-dev \
    zlib \
    zlib-dev \
    libpng-dev \
    libxslt-dev

# instead of installing, create a wheel
RUN pip install --upgrade pip
RUN pip wheel --wheel-dir=/root/wheels psycopg2
RUN pip wheel --wheel-dir=/root/wheels vcrpy
RUN pip wheel --wheel-dir=/root/wheels cryptography
RUN pip wheel --wheel-dir=/root/wheels psutil
RUN pip wheel --wheel-dir=/root/wheels twisted
RUN pip wheel --wheel-dir=/root/wheels hiredis
RUN pip wheel --wheel-dir=/root/wheels Pillow
RUN pip wheel --wheel-dir=/root/wheels newspaper3k

###
# Stage 2 - Image WITHOUT dev tools
FROM python:3.7-alpine

# Get alpine updates
RUN apk --update \
    add --no-cache --virtual .build-deps \
    postgresql-client \
    libjpeg \
    libjpeg-turbo-dev \
    libxslt-dev

ENV LIBRARY_PATH=/lib:/usr/lib

# Create a group and user to run the app
ARG APP_USER=appuser
RUN addgroup -S appgroup && adduser -S ${APP_USER} -G appgroup

# Copy wheels built in previous stage
COPY --from=buildimage /root/wheels /root/wheels

WORKDIR /usr/src/app

RUN pip install --upgrade pip

# copy requirements.txt and code
COPY ./requirements.txt /usr/src/app/
COPY ./app /usr/src/app/
RUN chown -R ${APP_USER}:appgroup . 

# Look for archives in # /root/wheels
RUN pip install \
      --no-index \
      --find-links=/root/wheels \
      psycopg2
RUN pip install \
      --no-index \
      --find-links=/root/wheels \
      vcrpy

RUN pip install \
      --no-index \
      --find-links=/root/wheels \
      psutil

RUN pip install \
      --no-index \
      --find-links=/root/wheels \
      cryptography


# channels dependencies
RUN pip install \
      --no-index \
      --find-links=/root/wheels \
      twisted

RUN pip install \
      --no-index \
      --find-links=/root/wheels \
      hiredis

RUN pip install \
      --no-index \
      --find-links=/root/wheels \
      Pillow

RUN pip install \
      --no-index \
      --find-links=/root/wheels \
      newspaper3k

# Install from pip archive
RUN pip install -r ./requirements.txt

RUN python -m \
    nltk.downloader \
    brown \
    punkt \
    maxent_treebank_pos_tagger \
    movie_reviews \
    wordnet stopwords \
    averaged_perceptron_tagger

# set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# Define environment variables, and default values if not set
ENV BACKEND_PORT=8000
ENV NUM_WORKERS=3

# gunicorn will listen on this port
EXPOSE ${BACKEND_PORT}

# Change to a non-root user
USER ${APP_USER}:${APP_USER}

# run entrypoint.sh
ENTRYPOINT ["/usr/src/app/entrypoint-prod.sh"]

# Start uWSGI
CMD ["sh", "-c", "gunicorn pulp.wsgi \
                    --access-logfile - \
                    --error-logfile - \
                    --workers ${NUM_WORKERS} \
                    --bind 0.0.0.0:${BACKEND_PORT}"]
