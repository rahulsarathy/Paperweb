STARTUP SEQUENCE
1. Postgres DB
2. Backend
3. Frontend
4. Redis
5. Parser
6. Ingress


DATABASE / POSTGRES POD SETUP

Notes: remember to save DB credentials using a k8s secrets object - https://kubernetes.io/docs/concepts/configuration/secret
1. Use base64 to encode username and password in postgres-secrets.yaml
# echo -n "<string>" | base64 

2. create postgres-secrets
# kubectl create -f ./postgres/pulp-postgres-secrets.yaml

To startup DB deloyment and service
# ./postgres/startup.sh

3. To test
 a. # kubectl get pods (get the pod id for pulp-postgres-db-deployment)
 b. # kubectl exec -it <postgres-db-deployment pod id> /bin/sh
 c. # psql -h localhost -U admin -d pulp_db -p 8080 --password 
 d. Test if you can connect to the database

To delete postgres-db service and deployment
# ./postgres/teaddown.sh

REDIS

1. Build the backend

# cd <pulp dir>/redis
# export PROJECT_ID=<set project id>
# docker build -t gcr.io/${PROJECT_ID}/pulp-redis:v1 .

2. Push the backend to gcr.io
# docker push gcr.io/${PROJECT_ID}/pulp-redis:v1

3. Deploy 
cd <pulp dir>/k8s-deployment/redis
kubectl create -f ./pulp-redis-deployment.yaml
kubectl create -f ./pulp-redis-service.yaml


BACKEND

1. Build the backend

# cd <pulp dir>/backend
# export PROJECT_ID=<set project id>
# docker build -f Dockerfile.prod -t gcr.io/${PROJECT_ID}/pulp-backend:v1 .

2. Push the backend to gcr.io
# docker push gcr.io/${PROJECT_ID}/pulp-backend:v1

3. Deploy 
cd <pulp dir>/k8s-deployment/backend
kubectl create -f ./pulp-backend-config.yaml
kubectl create -f ./pulp-backend-deployment.yaml
kubectl create -f ./pulp-backend-service.yaml

FRONTEND

1. Build the frontend

# cd <pulp dir>/frontend
# export PROJECT_ID=<set project id>
# docker build -t gcr.io/${PROJECT_ID}/pulp-frontend:v1 .

2. Push the frontend to gcr.io
# docker push gcr.io/${PROJECT_ID}/pulp-frontend:v1

3. Deploy 
cd <pulp dir>/k8s-deployment/frontend
kubectl create -f ./pulp-frontend-deployment.yaml
kubectl create -f ./pulp-frontend-service.yaml


PARSER

1. Build the parser

# cd <pulp dir>/node
# export PROJECT_ID=<set project id>
# docker build -t gcr.io/${PROJECT_ID}/pulp-parser:v1 .

2. Push the frontend to gcr.io
# docker push gcr.io/${PROJECT_ID}/pulp-parser:v1

3. Deploy 
cd <pulp dir>/k8s-deployment/parser

kubectl create -f ./pulp-parser-service.yaml


INGRES

1. Deploy the ingress
kubectl create -f ./pulp-ingres.yaml

